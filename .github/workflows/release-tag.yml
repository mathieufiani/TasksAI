name: Release and Deploy

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  PYTHON_VERSION: '3.11'
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          pytest tests/ -v --tb=short
        env:
          APP_NAME: "Task Management API - Test"
          DATABASE_URL: "sqlite:///./test.db"
          OPENAI_API_KEY: "test-key"
          PINECONE_API_KEY: "test-key"

  deploy:
    name: Deploy to GCP App Engine (Production)
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract tag name
        id: tag
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          # Convert v1.0.0 to v1-0-0 (lowercase letters, digits, hyphens only)
          VERSION_NAME=$(echo "$TAG_NAME" | tr '.' '-' | tr '[:upper:]' '[:lower:]')
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Inject secrets into app.production.yaml
        run: |
          # Add API keys to env_variables in app.production.yaml
          sed -i '/env_variables:/a\  OPENAI_API_KEY: "${{ secrets.OPENAI_API_KEY }}"\n  PINECONE_API_KEY: "${{ secrets.PINECONE_API_KEY }}"' app.production.yaml

      - name: Deploy to App Engine (Production)
        run: |
          gcloud app deploy app.production.yaml --quiet --version=${{ steps.tag.outputs.VERSION_NAME }} --promote

      - name: Create GitHub Release
        continue-on-error: true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.TAG_NAME }}
          release_name: Release ${{ steps.tag.outputs.TAG_NAME }}
          body: |
            ## Release ${{ steps.tag.outputs.TAG_NAME }}

            Deployed to production on GCP App Engine.

            Production URL: https://${{ env.GCP_PROJECT_ID }}.appspot.com
          draft: false
          prerelease: false

      - name: Deployment notification
        run: |
          echo "::notice title=Production Release::Successfully deployed ${{ steps.tag.outputs.TAG_NAME }} to production"
